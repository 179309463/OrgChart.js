{"version":3,"sources":["webpack:///webpack/bootstrap 0f0ab32710881b7f28ac","webpack:///./demo/local-datasource/scripts.js","webpack:///orgchart.js"],"names":["document","addEventListener","datascource","orgchart"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 0f0ab32710881b7f28ac","import OrgChart from '../../build/js/orgchart.min.js';\n\ndocument.addEventListener('DOMContentLoaded', function () {\n  let datascource = {\n    'name': 'Lao Lao',\n    'title': 'general manager',\n    'children': [\n      { 'name': 'Bo Miao', 'title': 'department manager' },\n      { 'name': 'Su Miao', 'title': 'department manager',\n        'children': [\n          { 'name': 'Tie Hua', 'title': 'senior engineer' },\n          { 'name': 'Hei Hei', 'title': 'senior engineer',\n            'children': [\n              { 'name': 'Pang Pang', 'title': 'engineer' },\n              { 'name': 'Xiang Xiang', 'title': 'UE engineer' }\n            ]\n          }\n        ]\n      },\n      { 'name': 'Yu Jie', 'title': 'department manager' },\n      { 'name': 'Yu Li', 'title': 'department manager' },\n      { 'name': 'Hong Miao', 'title': 'department manager' },\n      { 'name': 'Yu Wei', 'title': 'department manager' },\n      { 'name': 'Chun Miao', 'title': 'department manager' },\n      { 'name': 'Yu Tie', 'title': 'department manager' }\n    ]\n  },\n  orgchart = new OrgChart({\n    'chartContainer': '#chart-container',\n    'data' : datascource,\n    'depth': 2,\n    'nodeContent': 'title'\n  });\n\n});\n\n\n// WEBPACK FOOTER //\n// ./demo/local-datasource/scripts.js","export default class OrgChart {\n  constructor(options) {\n    this._name = 'OrgChart';\n    Promise.prototype.finally = function (callback) {\n      let P = this.constructor;\n\n      return this.then(\n        value => P.resolve(callback()).then(() => value),\n        reason => P.resolve(callback()).then(() => { throw reason; })\n      );\n    };\n\n    let that = this,\n      defaultOptions = {\n        'nodeTitle': 'name',\n        'nodeId': 'id',\n        'toggleSiblingsResp': false,\n        'depth': 999,\n        'chartClass': '',\n        'exportButton': false,\n        'exportFilename': 'OrgChart',\n        'parentNodeSymbol': 'fa-users',\n        'draggable': false,\n        'direction': 't2b',\n        'pan': false,\n        'zoom': false\n      },\n      opts = Object.assign(defaultOptions, options),\n      data = opts.data,\n      chart = document.createElement('div'),\n      chartContainer = document.querySelector(opts.chartContainer);\n\n    this.options = opts;\n    delete this.options.data;\n    this.chart = chart;\n    this.chartContainer = chartContainer;\n    chart.dataset.options = JSON.stringify(opts);\n    chart.setAttribute('class', 'orgchart' + (opts.chartClass !== '' ? ' ' + opts.chartClass : '') +\n      (opts.direction !== 't2b' ? ' ' + opts.direction : ''));\n    if (typeof data === 'object') { // local json datasource\n      this.buildHierarchy(chart, opts.ajaxURL ? data : this._attachRel(data, '00'), 0);\n    } else if (typeof data === 'string' && data.startsWith('#')) { // ul datasource\n      this.buildHierarchy(chart, this._buildJsonDS(document.querySelector(data).children[0]), 0);\n    } else { // ajax datasource\n      let spinner = document.createElement('i');\n\n      spinner.setAttribute('class', 'fa fa-circle-o-notch fa-spin spinner');\n      chart.appendChild(spinner);\n      this._getJSON(data)\n      .then(function (resp) {\n        that.buildHierarchy(chart, opts.ajaxURL ? resp : that._attachRel(resp, '00'), 0);\n      })\n      .catch(function (err) {\n        console.error('failed to fetch datasource for orgchart', err);\n      })\n      .finally(function () {\n        let spinner = chart.querySelector('.spinner');\n\n        spinner.parentNode.removeChild(spinner);\n      });\n    }\n    chart.addEventListener('click', this._clickChart.bind(this));\n    // append the export button to the chart-container\n    if (opts.exportButton && !chartContainer.querySelector('.oc-export-btn')) {\n      let exportBtn = document.createElement('button'),\n        downloadBtn = document.createElement('a');\n\n      exportBtn.setAttribute('class', 'oc-export-btn' + (opts.chartClass !== '' ? ' ' + opts.chartClass : ''));\n      exportBtn.innerHTML = 'Export';\n      exportBtn.addEventListener('click', this._clickExportButton.bind(this));\n      downloadBtn.setAttribute('class', 'oc-download-btn' + (opts.chartClass !== '' ? ' ' + opts.chartClass : ''));\n      downloadBtn.setAttribute('download', opts.exportFilename + '.png');\n      chartContainer.appendChild(exportBtn);\n      chartContainer.appendChild(downloadBtn);\n    }\n\n    if (opts.pan) {\n      chartContainer.style.overflow = 'hidden';\n      chart.addEventListener('mousedown', this._onPanStart.bind(this));\n      chart.addEventListener('touchstart', this._onPanStart.bind(this));\n      document.body.addEventListener('mouseup', this._onPanEnd.bind(this));\n      document.body.addEventListener('touchend', this._onPanEnd.bind(this));\n    }\n\n    if (opts.zoom) {\n      chartContainer.addEventListener('wheel', this._onWheeling.bind(this));\n      chartContainer.addEventListener('touchstart', this._onTouchStart.bind(this));\n      document.body.addEventListener('touchmove', this._onTouchMove.bind(this));\n      document.body.addEventListener('touchend', this._onTouchEnd.bind(this));\n    }\n\n    chartContainer.appendChild(chart);\n  }\n  get name() {\n    return this._name;\n  }\n  _closest(el, fn) {\n    return el && ((fn(el) && el !== this.chart) ? el : this._closest(el.parentNode, fn));\n  }\n  _siblings(el, expr) {\n    return Array.from(el.parentNode.children).filter((child) => {\n      if (child !== el) {\n        if (expr) {\n          return el.matches(expr);\n        }\n        return true;\n      }\n      return false;\n    });\n  }\n  _prevAll(el, expr) {\n    let sibs = [],\n      prevSib = el.previousElementSibling;\n\n    while (prevSib) {\n      if (!expr || prevSib.matches(expr)) {\n        sibs.push(prevSib);\n      }\n      prevSib = prevSib.previousElementSibling;\n    }\n    return sibs;\n  }\n  _nextAll(el, expr) {\n    let sibs = [];\n    let nextSib = el.nextElementSibling;\n\n    while (nextSib) {\n      if (!expr || nextSib.matches(expr)) {\n        sibs.push(nextSib);\n      }\n      nextSib = nextSib.nextElementSibling;\n    }\n    return sibs;\n  }\n  _isVisible(el) {\n    return el.offsetParent !== null;\n  }\n  _addClass(elements, classNames) {\n    elements.forEach((el) => {\n      if (classNames.indexOf(' ') > 0) {\n        classNames.split(' ').forEach((className) => el.classList.add(className));\n      } else {\n        el.classList.add(classNames);\n      }\n    });\n  }\n  _removeClass(elements, classNames) {\n    elements.forEach((el) => {\n      if (classNames.indexOf(' ') > 0) {\n        classNames.split(' ').forEach((className) => el.classList.remove(className));\n      } else {\n        el.classList.remove(classNames);\n      }\n    });\n  }\n  _css(elements, prop, val) {\n    elements.forEach((el) => {\n      el.style[prop] = val;\n    });\n  }\n  _removeAttr(elements, attr) {\n    elements.forEach((el) => {\n      el.removeAttribute(attr);\n    });\n  }\n  _one(el, type, listener, self) {\n    let one = function (event) {\n      try {\n        listener.call(self, event);\n      } finally {\n        el.removeEventListener(type, one);\n      }\n    };\n\n    el.addEventListener(type, one);\n  }\n  _getDescElements(ancestors, selector) {\n    let results = [];\n\n    ancestors.forEach((el) => results.push(...el.querySelectorAll(selector)));\n    return results;\n  }\n  _getJSON(url) {\n    return new Promise(function (resolve, reject) {\n      let xhr = new XMLHttpRequest();\n\n      function handler() {\n        if (this.readyState !== 4) {\n          return;\n        }\n        if (this.status === 200) {\n          resolve(JSON.parse(this.response));\n        } else {\n          reject(new Error(this.statusText));\n        }\n      }\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      // xhr.setRequestHeader('Accept', 'application/json');\n      xhr.setRequestHeader('Content-Type', 'application/json');\n      xhr.send();\n    });\n  }\n  _buildJsonDS(li) {\n    let subObj = {\n      'name': li.firstChild.textContent.trim(),\n      'relationship': (li.parentNode.parentNode.nodeName === 'LI' ? '1' : '0') +\n        (li.parentNode.children.length > 1 ? 1 : 0) + (li.children.length ? 1 : 0)\n    };\n\n    if (li.id) {\n      subObj.id = li.id;\n    }\n    if (li.querySelector('ul')) {\n      Array.from(li.querySelector('ul').children).forEach((el) => {\n        if (!subObj.children) { subObj.children = []; }\n        subObj.children.push(this._buildJsonDS(el));\n      });\n    }\n    return subObj;\n  }\n  _attachRel(data, flags) {\n    data.relationship = flags + (data.children && data.children.length > 0 ? 1 : 0);\n    if (data.children) {\n      for (let item of data.children) {\n        this._attachRel(item, '1' + (data.children.length > 1 ? 1 : 0));\n      }\n    }\n    return data;\n  }\n  _repaint(node) {\n    if (node) {\n      node.style.offsetWidth = node.offsetWidth;\n    }\n  }\n  // whether the cursor is hovering over the node\n  _isInAction(node) {\n    return node.querySelector(':scope > .edge').className.indexOf('fa-') > -1;\n  }\n  // detect the exist/display state of related node\n  _getNodeState(node, relation) {\n    let criteria,\n      state = { 'exist': false, 'visible': false };\n\n    if (relation === 'parent') {\n      criteria = this._closest(node, (el) => el.classList && el.classList.contains('nodes'));\n      if (criteria) {\n        state.exist = true;\n      }\n      if (state.exist && this._isVisible(criteria.parentNode.children[0])) {\n        state.visible = true;\n      }\n    } else if (relation === 'children') {\n      criteria = this._closest(node, (el) => el.nodeName === 'TR').nextElementSibling;\n      if (criteria) {\n        state.exist = true;\n      }\n      if (state.exist && this._isVisible(criteria)) {\n        state.visible = true;\n      }\n    } else if (relation === 'siblings') {\n      criteria = this._siblings(this._closest(node, (el) => el.nodeName === 'TABLE').parentNode);\n      if (criteria.length) {\n        state.exist = true;\n      }\n      if (state.exist && criteria.some((el) => this._isVisible(el))) {\n        state.visible = true;\n      }\n    }\n\n    return state;\n  }\n  // find the related nodes\n  getRelatedNodes(node, relation) {\n    if (relation === 'parent') {\n      return this._closest(node, (el) => el.classList.contains('nodes'))\n        .parentNode.children[0].querySelector('.node');\n    } else if (relation === 'children') {\n      return Array.from(this._closest(node, (el) => el.nodeName === 'TABLE').lastChild.children)\n        .map((el) => el.querySelector('.node'));\n    } else if (relation === 'siblings') {\n      return this._siblings(this._closest(node, (el) => el.nodeName === 'TABLE').parentNode)\n        .map((el) => el.querySelector('.node'));\n    }\n  }\n  _switchHorizontalArrow(node) {\n    let opts = this.options,\n      leftEdge = node.querySelector('.leftEdge'),\n      rightEdge = node.querySelector('.rightEdge'),\n      temp = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode;\n\n    if (opts.toggleSiblingsResp && (typeof opts.ajaxURL === 'undefined' ||\n      this._closest(node, (el) => el.classList.contains('.nodes')).dataset.siblingsLoaded)) {\n      let prevSib = temp.previousElementSibling,\n        nextSib = temp.nextElementSibling;\n\n      if (prevSib) {\n        if (prevSib.classList.contains('hidden')) {\n          leftEdge.classList.add('fa-chevron-left');\n          leftEdge.classList.remove('fa-chevron-right');\n        } else {\n          leftEdge.classList.add('fa-chevron-right');\n          leftEdge.classList.remove('fa-chevron-left');\n        }\n      }\n      if (nextSib) {\n        if (nextSib.classList.contains('hidden')) {\n          rightEdge.classList.add('fa-chevron-right');\n          rightEdge.classList.remove('fa-chevron-left');\n        } else {\n          rightEdge.classList.add('fa-chevron-left');\n          rightEdge.classList.remove('fa-chevron-right');\n        }\n      }\n    } else {\n      let sibs = this._siblings(temp),\n        sibsVisible = sibs.length ? !sibs.some((el) => el.classList.contains('hidden')) : false;\n\n      leftEdge.classList.toggle('fa-chevron-right', sibsVisible);\n      leftEdge.classList.toggle('fa-chevron-left', !sibsVisible);\n      rightEdge.classList.toggle('fa-chevron-left', sibsVisible);\n      rightEdge.classList.toggle('fa-chevron-right', !sibsVisible);\n    }\n  }\n  _hoverNode(event) {\n    let node = event.target,\n      flag = false,\n      topEdge = node.querySelector(':scope > .topEdge'),\n      bottomEdge = node.querySelector(':scope > .bottomEdge'),\n      leftEdge = node.querySelector(':scope > .leftEdge');\n\n    if (event.type === 'mouseenter') {\n      if (topEdge) {\n        flag = this._getNodeState(node, 'parent').visible;\n        topEdge.classList.toggle('fa-chevron-up', !flag);\n        topEdge.classList.toggle('fa-chevron-down', flag);\n      }\n      if (bottomEdge) {\n        flag = this._getNodeState(node, 'children').visible;\n        bottomEdge.classList.toggle('fa-chevron-down', !flag);\n        bottomEdge.classList.toggle('fa-chevron-up', flag);\n      }\n      if (leftEdge) {\n        this._switchHorizontalArrow(node);\n      }\n    } else {\n      Array.from(node.querySelectorAll(':scope > .edge')).forEach((el) => {\n        el.classList.remove('fa-chevron-up', 'fa-chevron-down', 'fa-chevron-right', 'fa-chevron-left');\n      });\n    }\n  }\n  // define node click event handler\n  _clickNode(event) {\n    let clickedNode = event.currentTarget,\n      focusedNode = this.chart.querySelector('.focused');\n\n    if (focusedNode) {\n      focusedNode.classList.remove('focused');\n    }\n    clickedNode.classList.add('focused');\n  }\n  // build the parent node of specific node\n  _buildParentNode(currentRoot, nodeData, callback) {\n    let that = this,\n      table = document.createElement('table');\n\n    nodeData.relationship = '001';\n    this._createNode(nodeData, 0)\n      .then(function (nodeDiv) {\n        let chart = that.chart;\n\n        nodeDiv.classList.remove('slide-up');\n        nodeDiv.classList.add('slide-down');\n        let parentTr = document.createElement('tr'),\n          superiorLine = document.createElement('tr'),\n          inferiorLine = document.createElement('tr'),\n          childrenTr = document.createElement('tr');\n\n        parentTr.setAttribute('class', 'hidden');\n        parentTr.innerHTML = `<td colspan=\"2\"></td>`;\n        table.appendChild(parentTr);\n        superiorLine.setAttribute('class', 'lines hidden');\n        superiorLine.innerHTML = `<td colspan=\"2\"><div class=\"downLine\"></div></td>`;\n        table.appendChild(superiorLine);\n        inferiorLine.setAttribute('class', 'lines hidden');\n        inferiorLine.innerHTML = `<td class=\"rightLine\">&nbsp;</td><td class=\"leftLine\">&nbsp;</td>`;\n        table.appendChild(inferiorLine);\n        childrenTr.setAttribute('class', 'nodes');\n        childrenTr.innerHTML = `<td colspan=\"2\"></td>`;\n        table.appendChild(childrenTr);\n        table.querySelector('td').appendChild(nodeDiv);\n        chart.insertBefore(table, chart.children[0]);\n        table.children[3].children[0].appendChild(chart.lastChild);\n        callback();\n      })\n      .catch(function (err) {\n        console.error('Failed to create parent node', err);\n      });\n  }\n  _switchVerticalArrow(arrow) {\n    arrow.classList.toggle('fa-chevron-up');\n    arrow.classList.toggle('fa-chevron-down');\n  }\n  // show the parent node of the specified node\n  showParent(node) {\n    // just show only one superior level\n    let temp = this._prevAll(this._closest(node, (el) => el.classList.contains('nodes')));\n\n    this._removeClass(temp, 'hidden');\n    // just show only one line\n    this._addClass(Array(temp[0].children).slice(1, -1), 'hidden');\n    // show parent node with animation\n    let parent = temp[2].querySelector('.node');\n\n    this._one(parent, 'transitionend', function () {\n      parent.classList.remove('slide');\n      if (this._isInAction(node)) {\n        this._switchVerticalArrow(node.querySelector(':scope > .topEdge'));\n      }\n    }, this);\n    this._repaint(parent);\n    parent.classList.add('slide');\n    parent.classList.remove('slide-down');\n  }\n  // show the sibling nodes of the specified node\n  showSiblings(node, direction) {\n    // firstly, show the sibling td tags\n    let siblings = [],\n      temp = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode;\n\n    if (direction) {\n      siblings = direction === 'left' ? this._prevAll(temp) : this._nextAll(temp);\n    } else {\n      siblings = this._siblings(temp);\n    }\n    this._removeClass(siblings, 'hidden');\n    // secondly, show the lines\n    let upperLevel = this._prevAll(this._closest(node, (el) => el.classList.contains('nodes')));\n\n    temp = Array.from(upperLevel[0].querySelectorAll(':scope > .hidden'));\n    if (direction) {\n      this._removeClass(temp.slice(0, siblings.length * 2), 'hidden');\n    } else {\n      this._removeClass(temp, 'hidden');\n    }\n    // thirdly, do some cleaning stuff\n    if (!this._getNodeState(node, 'parent').visible) {\n      this._removeClass(upperLevel, 'hidden');\n      let parent = upperLevel[2].querySelector('.node');\n\n      this._one(parent, 'transitionend', function (event) {\n        event.target.classList.remove('slide');\n      }, this);\n      this._repaint(parent);\n      parent.classList.add('slide');\n      parent.classList.remove('slide-down');\n    }\n    // lastly, show the sibling nodes with animation\n    siblings.forEach((sib) => {\n      Array.from(sib.querySelectorAll('.node')).forEach((node) => {\n        if (this._isVisible(node)) {\n          node.classList.add('slide');\n          node.classList.remove('slide-left', 'slide-right');\n        }\n      });\n    });\n    this._one(siblings[0].querySelector('.slide'), 'transitionend', function () {\n      siblings.forEach((sib) => {\n        this._removeClass(Array.from(sib.querySelectorAll('.slide')), 'slide');\n      });\n      if (this._isInAction(node)) {\n        this._switchHorizontalArrow(node);\n        node.querySelector('.topEdge').classList.remove('fa-chevron-up');\n        node.querySelector('.topEdge').classList.add('fa-chevron-down');\n      }\n    }, this);\n  }\n  // hide the sibling nodes of the specified node\n  hideSiblings(node, direction) {\n    let nodeContainer = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode,\n      siblings = this._siblings(nodeContainer);\n\n    siblings.forEach((sib) => {\n      if (sib.querySelector('.spinner')) {\n        this.chart.dataset.inAjax = false;\n      }\n    });\n\n    if (!direction || (direction && direction === 'left')) {\n      let preSibs = this._prevAll(nodeContainer);\n\n      preSibs.forEach((sib) => {\n        Array.from(sib.querySelectorAll('.node')).forEach((node) => {\n          if (this._isVisible(node)) {\n            node.classList.add('slide', 'slide-right');\n          }\n        });\n      });\n    }\n    if (!direction || (direction && direction !== 'left')) {\n      let nextSibs = this._nextAll(nodeContainer);\n\n      nextSibs.forEach((sib) => {\n        Array.from(sib.querySelectorAll('.node')).forEach((node) => {\n          if (this._isVisible(node)) {\n            node.classList.add('slide', 'slide-left');\n          }\n        });\n      });\n    }\n\n    let animatedNodes = [];\n\n    this._siblings(nodeContainer).forEach((sib) => {\n      Array.prototype.push.apply(animatedNodes, Array.from(sib.querySelectorAll('.slide')));\n    });\n    let lines = [];\n\n    for (let node of animatedNodes) {\n      let temp = this._closest(node, function (el) {\n        return el.classList.contains('nodes');\n      }).previousElementSibling;\n\n      lines.push(temp);\n      lines.push(temp.previousElementSibling);\n    }\n    lines = [...new Set(lines)];\n    lines.forEach(function (line) {\n      line.style.visibility = 'hidden';\n    });\n\n    this._one(animatedNodes[0], 'transitionend', function (event) {\n      lines.forEach(function (line) {\n        line.removeAttribute('style');\n      });\n      let sibs = [];\n\n      if (direction) {\n        if (direction === 'left') {\n          sibs = this._prevAll(nodeContainer, ':not(.hidden)');\n        } else {\n          sibs = this._nextAll(nodeContainer, ':not(.hidden)');\n        }\n      } else {\n        sibs = this._siblings(nodeContainer);\n      }\n      let temp = Array.from(this._closest(nodeContainer, function (el) {\n        return el.classList.contains('nodes');\n      }).previousElementSibling.querySelectorAll(':scope > :not(.hidden)'));\n\n      let someLines = temp.slice(1, direction ? sibs.length * 2 + 1 : -1);\n\n      this._addClass(someLines, 'hidden');\n      this._removeClass(animatedNodes, 'slide');\n      sibs.forEach((sib) => {\n        Array.from(sib.querySelectorAll('.node')).slice(1).forEach((node) => {\n          if (this._isVisible(node)) {\n            node.classList.remove('slide-left', 'slide-right');\n            node.classList.add('slide-up');\n          }\n        });\n      });\n      sibs.forEach((sib) => {\n        this._addClass(Array.from(sib.querySelectorAll('.lines')), 'hidden');\n        this._addClass(Array.from(sib.querySelectorAll('.nodes')), 'hidden');\n        this._addClass(Array.from(sib.querySelectorAll('.verticalNodes')), 'hidden');\n      });\n      this._addClass(sibs, 'hidden');\n\n      if (this._isInAction(node)) {\n        this._switchHorizontalArrow(node);\n      }\n    }, this);\n  }\n  // recursively hide the ancestor node and sibling nodes of the specified node\n  hideAncestorsSiblings(node) {\n    let temp = Array.from(this._closest(node, function (el) {\n      return el.classList.contains('nodes');\n    }).parentNode.children).slice(0, 3);\n\n    if (temp[0].querySelector('.spinner')) {\n      this.chart.dataset.inAjax = false;\n    }\n    // hide the sibling nodes\n    if (this._getNodeState(node, 'siblings').visible) {\n      this.hideSiblings(node);\n    }\n    // hide the lines\n    let lines = temp.slice(1);\n\n    this._css(lines, 'visibility', 'hidden');\n    // hide the superior nodes with transition\n    let parent = temp[0].querySelector('.node'),\n      grandfatherVisible = this._getNodeState(parent, 'parent').visible;\n\n    if (parent && this._isVisible(parent)) {\n      parent.classList.add('slide', 'slide-down');\n      this._one(parent, 'transitionend', function () {\n        parent.classList.remove('slide');\n        this._removeAttr(lines, 'style');\n        this._addClass(temp, 'hidden');\n      }, this);\n    }\n    // if the current node has the parent node, hide it recursively\n    if (parent && grandfatherVisible) {\n      this.hideAncestorsSiblings(parent);\n    }\n  }\n  // exposed method\n  addParent(currentRoot, data) {\n    let that = this;\n\n    this._buildParentNode(currentRoot, data, function () {\n      if (!currentRoot.querySelector(':scope > .topEdge')) {\n        let topEdge = document.createElement('i');\n\n        topEdge.setAttribute('class', 'edge verticalEdge topEdge fa');\n        currentRoot.appendChild(topEdge);\n      }\n      that.showParent(currentRoot);\n    });\n  }\n  // start up loading status for requesting new nodes\n  _startLoading(arrow, node) {\n    let opts = this.options,\n      chart = this.chart;\n\n    if (typeof chart.dataset.inAjax !== 'undefined' && chart.dataset.inAjax === 'true') {\n      return false;\n    }\n\n    arrow.classList.add('hidden');\n    let spinner = document.createElement('i');\n\n    spinner.setAttribute('class', 'fa fa-circle-o-notch fa-spin spinner');\n    node.appendChild(spinner);\n    this._addClass(Array.from(node.querySelectorAll(':scope > *:not(.spinner)')), 'hazy');\n    chart.dataset.inAjax = true;\n\n    let exportBtn = this.chartContainer.querySelector('.oc-export-btn' +\n      (opts.chartClass !== '' ? '.' + opts.chartClass : ''));\n\n    if (exportBtn) {\n      exportBtn.disabled = true;\n    }\n    return true;\n  }\n  // terminate loading status for requesting new nodes\n  _endLoading(arrow, node) {\n    let opts = this.options;\n\n    arrow.classList.remove('hidden');\n    node.querySelector(':scope > .spinner').remove();\n    this._removeClass(Array.from(node.querySelectorAll(':scope > .hazy')), 'hazy');\n    this.chart.dataset.inAjax = false;\n    let exportBtn = this.chartContainer.querySelector('.oc-export-btn' +\n      (opts.chartClass !== '' ? '.' + opts.chartClass : ''));\n\n    if (exportBtn) {\n      exportBtn.disabled = false;\n    }\n  }\n  // define click event handler for the top edge\n  _clickTopEdge(event) {\n    event.stopPropagation();\n    let that = this,\n      topEdge = event.target,\n      node = topEdge.parentNode,\n      parentState = this._getNodeState(node, 'parent'),\n      opts = this.options;\n\n    if (parentState.exist) {\n      let temp = this._closest(node, function (el) {\n        return el.classList.contains('nodes');\n      });\n      let parent = temp.parentNode.firstChild.querySelector('.node');\n\n      if (parent.classList.contains('slide')) { return; }\n      // hide the ancestor nodes and sibling nodes of the specified node\n      if (parentState.visible) {\n        this.hideAncestorsSiblings(node);\n        this._one(parent, 'transitionend', function () {\n          if (this._isInAction(node)) {\n            this._switchVerticalArrow(topEdge);\n            this._switchHorizontalArrow(node);\n          }\n        }, this);\n      } else { // show the ancestors and siblings\n        this.showParent(node);\n      }\n    } else {\n      // load the new parent node of the specified node by ajax request\n      let nodeId = topEdge.parentNode.id;\n\n      // start up loading status\n      if (this._startLoading(topEdge, node)) {\n        // load new nodes\n        this._getJSON(typeof opts.ajaxURL.parent === 'function' ?\n          opts.ajaxURL.parent(node.dataset.source) : opts.ajaxURL.parent + nodeId)\n        .then(function (resp) {\n          if (that.chart.dataset.inAjax === 'true') {\n            if (Object.keys(resp).length) {\n              that.addParent(node, resp);\n            }\n          }\n        })\n        .catch(function (err) {\n          console.error('Failed to get parent node data.', err);\n        })\n        .finally(function () {\n          that._endLoading(topEdge, node);\n        });\n      }\n    }\n  }\n  // recursively hide the descendant nodes of the specified node\n  hideDescendants(node) {\n    let that = this,\n      temp = this._nextAll(node.parentNode.parentNode),\n      lines = [];\n\n    if (temp[2].querySelector('.spinner')) {\n      this.chart.dataset.inAjax = false;\n    }\n    let descendants = Array.from(temp[2].querySelectorAll('.node')).filter((el) => that._isVisible(el)),\n      isVerticalDesc = temp[2].classList.contains('verticalNodes');\n\n    if (!isVerticalDesc) {\n      descendants.forEach((desc) => {\n        Array.prototype.push.apply(lines,\n          that._prevAll(that._closest(desc, (el) => el.classList.contains('nodes')), '.lines'));\n      });\n      lines = [...new Set(lines)];\n      this._css(lines, 'visibility', 'hidden');\n    }\n    this._one(descendants[0], 'transitionend', function (event) {\n      this._removeClass(descendants, 'slide');\n      if (isVerticalDesc) {\n        that._addClass(temp, 'hidden');\n      } else {\n        lines.forEach((el) => {\n          el.removeAttribute('style');\n          el.classList.add('hidden');\n          el.parentNode.lastChild.classList.add('hidden');\n        });\n        this._addClass(Array.from(temp[2].querySelectorAll('.verticalNodes')), 'hidden');\n      }\n      if (this._isInAction(node)) {\n        this._switchVerticalArrow(node.querySelector('.bottomEdge'));\n      }\n    }, this);\n    this._addClass(descendants, 'slide slide-up');\n  }\n  // show the children nodes of the specified node\n  showDescendants(node) {\n    let that = this,\n      temp = this._nextAll(node.parentNode.parentNode),\n      descendants = [];\n\n    this._removeClass(temp, 'hidden');\n    if (temp.some((el) => el.classList.contains('verticalNodes'))) {\n      temp.forEach((el) => {\n        Array.prototype.push.apply(descendants, Array.from(el.querySelectorAll('.node')).filter((el) => {\n          return that._isVisible(el);\n        }));\n      });\n    } else {\n      Array.from(temp[2].children).forEach((el) => {\n        Array.prototype.push.apply(descendants,\n          Array.from(el.querySelector('tr').querySelectorAll('.node')).filter((el) => {\n            return that._isVisible(el);\n          }));\n      });\n    }\n    // the two following statements are used to enforce browser to repaint\n    this._repaint(descendants[0]);\n    this._one(descendants[0], 'transitionend', (event) => {\n      this._removeClass(descendants, 'slide');\n      if (this._isInAction(node)) {\n        this._switchVerticalArrow(node.querySelector('.bottomEdge'));\n      }\n    }, this);\n    this._addClass(descendants, 'slide');\n    this._removeClass(descendants, 'slide-up');\n  }\n  // build the child nodes of specific node\n  _buildChildNode(appendTo, nodeData, callback) {\n    let data = nodeData.children || nodeData.siblings;\n\n    appendTo.querySelector('td').setAttribute('colSpan', data.length * 2);\n    this.buildHierarchy(appendTo, { 'children': data }, 0, callback);\n  }\n  // exposed method\n  addChildren(node, data) {\n    let that = this,\n      opts = this.options,\n      count = 0;\n\n    this.chart.dataset.inEdit = 'addChildren';\n    this._buildChildNode.call(this, this._closest(node, (el) => el.nodeName === 'TABLE'), data, function () {\n      if (++count === data.children.length) {\n        if (!node.querySelector('.bottomEdge')) {\n          let bottomEdge = document.createElement('i');\n\n          bottomEdge.setAttribute('class', 'edge verticalEdge bottomEdge fa');\n          node.appendChild(bottomEdge);\n        }\n        if (!node.querySelector('.symbol')) {\n          let symbol = document.createElement('i');\n\n          symbol.setAttribute('class', 'fa ' + opts.parentNodeSymbol + ' symbol');\n          node.querySelector(':scope > .title').appendChild(symbol);\n        }\n        that.showDescendants(node);\n        that.chart.dataset.inEdit = '';\n      }\n    });\n  }\n  // bind click event handler for the bottom edge\n  _clickBottomEdge(event) {\n    event.stopPropagation();\n    let that = this,\n      opts = this.options,\n      bottomEdge = event.target,\n      node = bottomEdge.parentNode,\n      childrenState = this._getNodeState(node, 'children');\n\n    if (childrenState.exist) {\n      let temp = this._closest(node, function (el) {\n        return el.nodeName === 'TR';\n      }).parentNode.children[3];\n\n      if (Array.from(temp.querySelectorAll('.node')).some((node) => {\n        return this._isVisible(node) && node.classList.contains('slide');\n      })) { return; }\n      // hide the descendant nodes of the specified node\n      if (childrenState.visible) {\n        this.hideDescendants(node);\n      } else { // show the descendants\n        this.showDescendants(node);\n      }\n    } else { // load the new children nodes of the specified node by ajax request\n      let nodeId = bottomEdge.parentNode.id;\n\n      if (this._startLoading(bottomEdge, node)) {\n        this._getJSON(typeof opts.ajaxURL.children === 'function' ?\n          opts.ajaxURL.children(node.dataset.source) : opts.ajaxURL.children + nodeId)\n        .then(function (resp) {\n          if (that.chart.dataset.inAjax === 'true') {\n            if (resp.children.length) {\n              that.addChildren(node, resp);\n            }\n          }\n        })\n        .catch(function (err) {\n          console.error('Failed to get children nodes data', err);\n        })\n        .finally(function () {\n          that._endLoading(bottomEdge, node);\n        });\n      }\n    }\n  }\n  // subsequent processing of build sibling nodes\n  _complementLine(oneSibling, siblingCount, existingSibligCount) {\n    let temp = oneSibling.parentNode.parentNode.children;\n\n    temp[0].children[0].setAttribute('colspan', siblingCount * 2);\n    temp[1].children[0].setAttribute('colspan', siblingCount * 2);\n    for (let i = 0; i < existingSibligCount; i++) {\n      let rightLine = document.createElement('td'),\n        leftLine = document.createElement('td');\n\n      rightLine.setAttribute('class', 'rightLine topLine');\n      rightLine.innerHTML = '&nbsp;';\n      temp[2].insertBefore(rightLine, temp[2].children[1]);\n      leftLine.setAttribute('class', 'leftLine topLine');\n      leftLine.innerHTML = '&nbsp;';\n      temp[2].insertBefore(leftLine, temp[2].children[1]);\n    }\n  }\n  // build the sibling nodes of specific node\n  _buildSiblingNode(nodeChart, nodeData, callback) {\n    let that = this,\n      newSiblingCount = nodeData.siblings ? nodeData.siblings.length : nodeData.children.length,\n      existingSibligCount = nodeChart.parentNode.nodeName === 'TD' ? this._closest(nodeChart, (el) => {\n        return el.nodeName === 'TR';\n      }).children.length : 1,\n      siblingCount = existingSibligCount + newSiblingCount,\n      insertPostion = (siblingCount > 1) ? Math.floor(siblingCount / 2 - 1) : 0;\n\n    // just build the sibling nodes for the specific node\n    if (nodeChart.parentNode.nodeName === 'TD') {\n      let temp = this._prevAll(nodeChart.parentNode.parentNode);\n\n      temp[0].remove();\n      temp[1].remove();\n      let childCount = 0;\n\n      that._buildChildNode.call(that, that._closest(nodeChart.parentNode, (el) => el.nodeName === 'TABLE'),\n        nodeData, () => {\n        if (++childCount === newSiblingCount) {\n          let siblingTds = Array.from(that._closest(nodeChart.parentNode, (el) => el.nodeName === 'TABLE')\n            .lastChild.children);\n\n          if (existingSibligCount > 1) {\n            Array.from(nodeChart.parentNode.children).forEach((el) => {\n              siblingTds[0].parentNode.insertBefore(el, siblingTds[0]);\n            });\n            nodeChart.parentNode.parentNode.remove();\n            that._complementLine(siblingTds[0], siblingCount, existingSibligCount);\n            that._addClass(siblingTds, 'hidden');\n            siblingTds.forEach((el) => {\n              that._addClass(el.querySelectorAll('.node'), 'slide-left');\n            });\n          } else {\n            let temp = nodeChart.parentNode.parentNode;\n\n            siblingTds[insertPostion].parentNode.insertBefore(nodeChart.parentNode, siblingTds[insertPostion + 1]);\n            temp.remove();\n            that._complementLine(siblingTds[insertPostion], siblingCount, 1);\n            that._addClass(siblingTds, 'hidden');\n            that._addClass(that._getDescElements(siblingTds.slice(0, insertPostion + 1), '.node'), 'slide-right');\n            that._addClass(that._getDescElements(siblingTds.slice(insertPostion + 1), '.node'), 'slide-left');\n          }\n          callback();\n        }\n      });\n    } else { // build the sibling nodes and parent node for the specific ndoe\n      let nodeCount = 0;\n\n      that.buildHierarchy.call(that, that.chart, nodeData, 0, () => {\n        if (++nodeCount === siblingCount) {\n          let temp = nodeChart.nextElementSibling.children[3]\n            .children[insertPostion],\n            td = document.createElement('td');\n\n          td.setAttribute('colspan', 2);\n          td.appendChild(nodeChart);\n          temp.parentNode.insertBefore(td, temp.nextElementSibling);\n          that._complementLine(temp, siblingCount, 1);\n\n          let temp2 = that._closest(nodeChart, (el) => el.classList && el.classList.contains('nodes'))\n            .parentNode.children[0];\n\n          temp2.classList.add('hidden');\n          that._addClass(Array.from(temp2.querySelectorAll('.node')), 'slide-down');\n\n          let temp3 = this._siblings(nodeChart.parentNode);\n\n          that._addClass(temp3, 'hidden');\n          that._addClass(that._getDescElements(temp3.slice(0, insertPostion), '.node'), 'slide-right');\n          that._addClass(that._getDescElements(temp3.slice(insertPostion), '.node'), 'slide-left');\n          callback();\n        }\n      });\n    }\n  }\n  addSiblings(node, data) {\n    let that = this;\n\n    this.chart.dataset.inEdit = 'addSiblings';\n    this._buildSiblingNode.call(this, this._closest(node, (el) => el.nodeName === 'TABLE'), data, () => {\n      that._closest(node, (el) => el.classList && el.classList.contains('nodes'))\n        .dataset.siblingsLoaded = true;\n      if (!node.querySelector('.leftEdge')) {\n        let rightEdge = document.createElement('i'),\n          leftEdge = document.createElement('i');\n\n        rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n        node.appendChild(rightEdge);\n        leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n        node.appendChild(leftEdge);\n      }\n      that.showSiblings(node);\n      that.chart.dataset.inEdit = '';\n    });\n  }\n  // bind click event handler for the left and right edges\n  _clickHorizontalEdge(event) {\n    event.stopPropagation();\n    let that = this,\n      opts = this.options,\n      hEdge = event.target,\n      node = hEdge.parentNode,\n      siblingsState = this._getNodeState(node, 'siblings');\n\n    if (siblingsState.exist) {\n      let temp = this._closest(node, function (el) {\n          return el.nodeName === 'TABLE';\n        }).parentNode,\n        siblings = this._siblings(temp);\n\n      if (siblings.some((el) => {\n        let node = el.querySelector('.node');\n\n        return this._isVisible(node) && node.classList.contains('slide');\n      })) { return; }\n      if (opts.toggleSiblingsResp) {\n        let prevSib = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode.previousElementSibling,\n          nextSib = this._closest(node, (el) => el.nodeName === 'TABLE').parentNode.nextElementSibling;\n\n        if (hEdge.classList.contains('leftEdge')) {\n          if (prevSib.classList.contains('hidden')) {\n            this.showSiblings(node, 'left');\n          } else {\n            this.hideSiblings(node, 'left');\n          }\n        } else {\n          if (nextSib.classList.contains('hidden')) {\n            this.showSiblings(node, 'right');\n          } else {\n            this.hideSiblings(node, 'right');\n          }\n        }\n      } else {\n        if (siblingsState.visible) {\n          this.hideSiblings(node);\n        } else {\n          this.showSiblings(node);\n        }\n      }\n    } else {\n      // load the new sibling nodes of the specified node by ajax request\n      let nodeId = hEdge.parentNode.id,\n        url = (this._getNodeState(node, 'parent').exist) ?\n          (typeof opts.ajaxURL.siblings === 'function' ?\n            opts.ajaxURL.siblings(JSON.parse(node.dataset.source)) : opts.ajaxURL.siblings + nodeId) :\n          (typeof opts.ajaxURL.families === 'function' ?\n            opts.ajaxURL.families(JSON.parse(node.dataset.source)) : opts.ajaxURL.families + nodeId);\n\n      if (this._startLoading(hEdge, node)) {\n        this._getJSON(url)\n        .then(function (resp) {\n          if (that.chart.dataset.inAjax === 'true') {\n            if (resp.siblings || resp.children) {\n              that.addSiblings(node, resp);\n            }\n          }\n        })\n        .catch(function (err) {\n          console.error('Failed to get sibling nodes data', err);\n        })\n        .finally(function () {\n          that._endLoading(hEdge, node);\n        });\n      }\n    }\n  }\n  // event handler for toggle buttons in Hybrid(horizontal + vertical) OrgChart\n  _clickToggleButton(event) {\n    let that = this,\n      toggleBtn = event.target,\n      descWrapper = toggleBtn.parentNode.nextElementSibling,\n      descendants = descWrapper.querySelectorAll('.node'),\n      children = descWrapper.children.map(function (item) {\n        return item.querySelector('.node');\n      });\n\n    if (children.some((item) => item.classList.contains('.slide'))) { return; }\n    toggleBtn.classList.toggle('fa-plus-square');\n    toggleBtn.classList.toggle('fa-minus-square');\n    if (descendants[0].classList.contains('.slide-up')) {\n      descWrapper.classList.remove('hidden');\n      this._repaint(children[0]);\n      this._addClass(children, 'slide');\n      this._removeClass(children, 'slide-up');\n      children[0].addEventListener('transitionend', function () {\n        that._removeClass(children, 'slide');\n      }, { 'once': true });\n    } else {\n      this._addClass(descendants, 'slide slide-up');\n      descendants[0].addEventListener('transitionend', function () {\n        that._removeClass(descendants, 'slide');\n        let ul = this._closest(descendants[0], function (el) {\n          return el.nodeName === 'ul';\n        });\n\n        ul.classList.add('hidden');\n      }, { 'once': true });\n      let subToggleBtn = descendants[0].querySelector('.toggleBtn').classList.remove('fa-minus-square');\n\n      subToggleBtn.classList.add('fa-plus-square');\n    }\n  }\n  _dispatchClickEvent(event) {\n    let classList = event.target.classList;\n\n    if (classList.contains('topEdge')) {\n      this._clickTopEdge(event);\n    } else if (classList.contains('rightEdge') || classList.contains('leftEdge')) {\n      this._clickHorizontalEdge(event);\n    } else if (classList.contains('bottomEdge')) {\n      this._clickBottomEdge(event);\n    } else if (classList.contains('toggleBtn')) {\n      this._clickToggleButton(event);\n    } else {\n      this._clickNode(event);\n    }\n  }\n  _onDragStart(event) {\n    let nodeDiv = event.target,\n      opts = this.options,\n      isFirefox = /firefox/.test(window.navigator.userAgent.toLowerCase());\n\n    if (isFirefox) {\n      event.dataTransfer.setData('text/html', 'hack for firefox');\n    }\n    // if users enable zoom or direction options\n    if (this.chart.style.transform) {\n      let ghostNode, nodeCover;\n\n      if (!document.querySelector('.ghost-node')) {\n        ghostNode = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        ghostNode.classList.add('ghost-node');\n        nodeCover = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\n        ghostNode.appendChild(nodeCover);\n        this.chart.appendChild(ghostNode);\n      } else {\n        ghostNode = this.chart.querySelector(':scope > .ghost-node');\n        nodeCover = ghostNode.children[0];\n      }\n      let transValues = this.chart.style.transform.split(','),\n        scale = Math.abs(window.parseFloat((opts.direction === 't2b' || opts.direction === 'b2t') ?\n          transValues[0].slice(transValues[0].indexOf('(') + 1) : transValues[1]));\n\n      ghostNode.setAttribute('width', nodeDiv.offsetWidth);\n      ghostNode.setAttribute('height', nodeDiv.offsetHeight);\n      nodeCover.setAttribute('x', 5 * scale);\n      nodeCover.setAttribute('y', 5 * scale);\n      nodeCover.setAttribute('width', 120 * scale);\n      nodeCover.setAttribute('height', 40 * scale);\n      nodeCover.setAttribute('rx', 4 * scale);\n      nodeCover.setAttribute('ry', 4 * scale);\n      nodeCover.setAttribute('stroke-width', 1 * scale);\n      let xOffset = event.offsetX * scale,\n        yOffset = event.offsetY * scale;\n\n      if (opts.direction === 'l2r') {\n        xOffset = event.offsetY * scale;\n        yOffset = event.offsetX * scale;\n      } else if (opts.direction === 'r2l') {\n        xOffset = nodeDiv.offsetWidth - event.offsetY * scale;\n        yOffset = event.offsetX * scale;\n      } else if (opts.direction === 'b2t') {\n        xOffset = nodeDiv.offsetWidth - event.offsetX * scale;\n        yOffset = nodeDiv.offsetHeight - event.offsetY * scale;\n      }\n      if (isFirefox) { // hack for old version of Firefox(< 48.0)\n        let ghostNodeWrapper = document.createElement('img');\n\n        ghostNodeWrapper.src = 'data:image/svg+xml;utf8,' + (new XMLSerializer()).serializeToString(ghostNode);\n        event.dataTransfer.setDragImage(ghostNodeWrapper, xOffset, yOffset);\n        nodeCover.setAttribute('fill', 'rgb(255, 255, 255)');\n        nodeCover.setAttribute('stroke', 'rgb(191, 0, 0)');\n      } else {\n        event.dataTransfer.setDragImage(ghostNode, xOffset, yOffset);\n      }\n    }\n    let dragged = event.target,\n      dragZone = this._closest(dragged, (el) => {\n        return el.classList && el.classList.contains('nodes');\n      }).parentNode.children[0].querySelector('.node'),\n      dragHier = Array.from(this._closest(dragged, (el) => {\n        return el.nodeName === 'TABLE';\n      }).querySelectorAll('.node'));\n\n    this.dragged = dragged;\n    Array.from(this.chart.querySelectorAll('.node')).forEach(function (node) {\n      if (!dragHier.includes(node)) {\n        if (opts.dropCriteria) {\n          if (opts.dropCriteria(dragged, dragZone, node)) {\n            node.classList.add('allowedDrop');\n          }\n        } else {\n          node.classList.add('allowedDrop');\n        }\n      }\n    });\n  }\n  _onDragOver(event) {\n    event.preventDefault();\n    let dropZone = event.currentTarget;\n\n    if (!dropZone.classList.contains('allowedDrop')) {\n      event.dataTransfer.dropEffect = 'none';\n    }\n  }\n  _onDragEnd(event) {\n    Array.from(this.chart.querySelectorAll('.allowedDrop')).forEach(function (el) {\n      el.classList.remove('allowedDrop');\n    });\n  }\n  _onDrop(event) {\n    let dropZone = event.currentTarget,\n      chart = this.chart,\n      dragged = this.dragged,\n      dragZone = this._closest(dragged, function (el) {\n        return el.classList && el.classList.contains('nodes');\n      }).parentNode.children[0].children[0];\n\n    this._removeClass(Array.from(chart.querySelectorAll('.allowedDrop')), 'allowedDrop');\n    // firstly, deal with the hierarchy of drop zone\n    if (!dropZone.parentNode.parentNode.nextElementSibling) { // if the drop zone is a leaf node\n      let bottomEdge = document.createElement('i');\n\n      bottomEdge.setAttribute('class', 'edge verticalEdge bottomEdge fa');\n      dropZone.appendChild(bottomEdge);\n      dropZone.parentNode.setAttribute('colspan', 2);\n      let table = this._closest(dropZone, function (el) {\n          return el.nodeName === 'TABLE';\n        }),\n        upperTr = document.createElement('tr'),\n        lowerTr = document.createElement('tr'),\n        nodeTr = document.createElement('tr');\n\n      upperTr.setAttribute('class', 'lines');\n      upperTr.innerHTML = `<td colspan=\"2\"><div class=\"downLine\"></div></td>`;\n      table.appendChild(upperTr);\n      lowerTr.setAttribute('class', 'lines');\n      lowerTr.innerHTML = `<td class=\"rightLine\">&nbsp;</td><td class=\"leftLine\">&nbsp;</td>`;\n      table.appendChild(lowerTr);\n      nodeTr.setAttribute('class', 'nodes');\n      table.appendChild(nodeTr);\n      Array.from(dragged.querySelectorAll('.horizontalEdge')).forEach((hEdge) => {\n        dragged.removeChild(hEdge);\n      });\n      let draggedTd = this._closest(dragged, (el) => el.nodeName === 'TABLE').parentNode;\n\n      nodeTr.appendChild(draggedTd);\n    } else {\n      let dropColspan = window.parseInt(dropZone.parentNode.colSpan) + 2;\n\n      dropZone.parentNode.setAttribute('colspan', dropColspan);\n      dropZone.parentNode.parentNode.nextElementSibling.children[0].setAttribute('colspan', dropColspan);\n      if (!dragged.querySelector('.horizontalEdge')) {\n        let rightEdge = document.createElement('i'),\n          leftEdge = document.createElement('i');\n\n        rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n        dragged.appendChild(rightEdge);\n        leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n        dragged.appendChild(leftEdge);\n      }\n      let temp = dropZone.parentNode.parentNode.nextElementSibling.nextElementSibling,\n        leftline = document.createElement('td'),\n        rightline = document.createElement('td');\n\n      leftline.setAttribute('class', 'leftLine topLine');\n      leftline.innerHTML = `&nbsp;`;\n      temp.insertBefore(leftline, temp.children[1]);\n      rightline.setAttribute('class', 'rightLine topLine');\n      rightline.innerHTML = `&nbsp;`;\n      temp.insertBefore(rightline, temp.children[2]);\n      temp.nextElementSibling.appendChild(this._closest(dragged, function (el) {\n        return el.nodeName === 'TABLE';\n      }).parentNode);\n\n      let dropSibs = this._siblings(this._closest(dragged, function (el) {\n        return el.nodeName === 'TABLE';\n      }).parentNode).map((el) => el.querySelector('.node'));\n\n      if (dropSibs.length === 1) {\n        let rightEdge = document.createElement('i'),\n          leftEdge = document.createElement('i');\n\n        rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n        dropSibs[0].appendChild(rightEdge);\n        leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n        dropSibs[0].appendChild(leftEdge);\n      }\n    }\n    // secondly, deal with the hierarchy of dragged node\n    let dragColSpan = window.parseInt(dragZone.colSpan);\n\n    if (dragColSpan > 2) {\n      dragZone.setAttribute('colspan', dragColSpan - 2);\n      dragZone.parentNode.nextElementSibling.children[0].setAttribute('colspan', dragColSpan - 2);\n      let temp = dragZone.parentNode.nextElementSibling.nextElementSibling;\n\n      temp.children[1].remove();\n      temp.children[1].remove();\n\n      let dragSibs = Array.from(dragZone.parentNode.parentNode.children[3].children).map(function (td) {\n        return td.querySelector('.node');\n      });\n\n      if (dragSibs.length === 1) {\n        dragSibs[0].querySelector('.leftEdge').remove();\n        dragSibs[0].querySelector('.rightEdge').remove();\n      }\n    } else {\n      dragZone.removeAttribute('colspan');\n      dragZone.querySelector('.node').removeChild(dragZone.querySelector('.bottomEdge'));\n      Array.from(dragZone.parentNode.parentNode.children).slice(1).forEach((tr) => tr.remove());\n    }\n    let customE = new CustomEvent('nodedropped.orgchart', { 'detail': {\n      'draggedNode': dragged,\n      'dragZone': dragZone.children[0],\n      'dropZone': dropZone\n    }});\n\n    chart.dispatchEvent(customE);\n  }\n  // create node\n  _createNode(nodeData, level) {\n    let that = this,\n      opts = this.options;\n\n    return new Promise(function (resolve, reject) {\n      if (nodeData.children) {\n        for (let child of nodeData.children) {\n          child.parentId = nodeData.id;\n        }\n      }\n\n      // construct the content of node\n      let nodeDiv = document.createElement('div');\n\n      delete nodeData.children;\n      nodeDiv.dataset.source = JSON.stringify(nodeData);\n      if (nodeData[opts.nodeId]) {\n        nodeDiv.id = nodeData[opts.nodeId];\n      }\n      let inEdit = that.chart.dataset.inEdit,\n        isHidden;\n\n      if (inEdit) {\n        isHidden = inEdit === 'addChildren' ? ' slide-up' : '';\n      } else {\n        isHidden = level >= opts.depth ? ' slide-up' : '';\n      }\n      nodeDiv.setAttribute('class', 'node ' + (nodeData.className || '') + isHidden);\n      if (opts.draggable) {\n        nodeDiv.setAttribute('draggable', true);\n      }\n      if (nodeData.parentId) {\n        nodeDiv.setAttribute('data-parent', nodeData.parentId);\n      }\n      nodeDiv.innerHTML = `\n        <div class=\"title\">${nodeData[opts.nodeTitle]}</div>\n        ${opts.nodeContent ? `<div class=\"content\">${nodeData[opts.nodeContent]}</div>` : ''}\n      `;\n      // append 4 direction arrows or expand/collapse buttons\n      let flags = nodeData.relationship || '';\n\n      if (opts.verticalDepth && (level + 2) > opts.verticalDepth) {\n        if ((level + 1) >= opts.verticalDepth && Number(flags.substr(2, 1))) {\n          let toggleBtn = document.createElement('i');\n\n          toggleBtn.setAttribute('class', 'toggleBtn fa fa-minus-square');\n          nodeDiv.appendChild(toggleBtn);\n        }\n      } else {\n        if (Number(flags.substr(0, 1))) {\n          let topEdge = document.createElement('i');\n\n          topEdge.setAttribute('class', 'edge verticalEdge topEdge fa');\n          nodeDiv.appendChild(topEdge);\n        }\n        if (Number(flags.substr(1, 1))) {\n          let rightEdge = document.createElement('i'),\n            leftEdge = document.createElement('i');\n\n          rightEdge.setAttribute('class', 'edge horizontalEdge rightEdge fa');\n          nodeDiv.appendChild(rightEdge);\n          leftEdge.setAttribute('class', 'edge horizontalEdge leftEdge fa');\n          nodeDiv.appendChild(leftEdge);\n        }\n        if (Number(flags.substr(2, 1))) {\n          let bottomEdge = document.createElement('i'),\n            symbol = document.createElement('i'),\n            title = nodeDiv.querySelector(':scope > .title');\n\n          bottomEdge.setAttribute('class', 'edge verticalEdge bottomEdge fa');\n          nodeDiv.appendChild(bottomEdge);\n          symbol.setAttribute('class', 'fa ' + opts.parentNodeSymbol + ' symbol');\n          title.insertBefore(symbol, title.children[0]);\n        }\n      }\n\n      nodeDiv.addEventListener('mouseenter', that._hoverNode.bind(that));\n      nodeDiv.addEventListener('mouseleave', that._hoverNode.bind(that));\n      nodeDiv.addEventListener('click', that._dispatchClickEvent.bind(that));\n      if (opts.draggable) {\n        nodeDiv.addEventListener('dragstart', that._onDragStart.bind(that));\n        nodeDiv.addEventListener('dragover', that._onDragOver.bind(that));\n        nodeDiv.addEventListener('dragend', that._onDragEnd.bind(that));\n        nodeDiv.addEventListener('drop', that._onDrop.bind(that));\n      }\n      // allow user to append dom modification after finishing node create of orgchart\n      if (opts.createNode) {\n        opts.createNode(nodeDiv, nodeData);\n      }\n\n      resolve(nodeDiv);\n    });\n  }\n  buildHierarchy(appendTo, nodeData, level, callback) {\n    // Construct the node\n    let that = this,\n      opts = this.options,\n      nodeWrapper,\n      childNodes = nodeData.children,\n      isVerticalNode = opts.verticalDepth && (level + 1) >= opts.verticalDepth;\n\n    if (Object.keys(nodeData).length > 1) { // if nodeData has nested structure\n      nodeWrapper = isVerticalNode ? appendTo : document.createElement('table');\n      if (!isVerticalNode) {\n        appendTo.appendChild(nodeWrapper);\n      }\n      this._createNode(nodeData, level)\n      .then(function (nodeDiv) {\n        if (isVerticalNode) {\n          nodeWrapper.appendChild(nodeDiv);\n        }else {\n          let tr = document.createElement('tr');\n\n          tr.innerHTML = `\n            <td ${childNodes ? `colspan=\"${childNodes.length * 2}\"` : ''}>\n            </td>\n          `;\n          tr.children[0].appendChild(nodeDiv);\n          nodeWrapper.insertBefore(tr, nodeWrapper.children[0] ? nodeWrapper.children[0] : null);\n        }\n        if (callback) {\n          callback();\n        }\n      })\n      .catch(function (err) {\n        console.error('Failed to creat node', err);\n      });\n    }\n    // Construct the inferior nodes and connectiong lines\n    if (childNodes) {\n      if (Object.keys(nodeData).length === 1) { // if nodeData is just an array\n        nodeWrapper = appendTo;\n      }\n      let isHidden,\n        isVerticalLayer = opts.verticalDepth && (level + 2) >= opts.verticalDepth,\n        inEdit = that.chart.dataset.inEdit;\n\n      if (inEdit) {\n        isHidden = inEdit === 'addSiblings' ? '' : ' hidden';\n      } else {\n        isHidden = level + 1 >= opts.depth ? ' hidden' : '';\n      }\n\n      // draw the line close to parent node\n      if (!isVerticalLayer) {\n        let tr = document.createElement('tr');\n\n        tr.setAttribute('class', 'lines' + isHidden);\n        tr.innerHTML = `\n          <td colspan=\"${ childNodes.length * 2 }\">\n            <div class=\"downLine\"></div>\n          </td>\n        `;\n        nodeWrapper.appendChild(tr);\n      }\n      // draw the lines close to children nodes\n      let lineLayer = document.createElement('tr');\n\n      lineLayer.setAttribute('class', 'lines' + isHidden);\n      lineLayer.innerHTML = `\n        <td class=\"rightLine\">&nbsp;</td>\n        ${childNodes.slice(1).map(() => `\n          <td class=\"leftLine topLine\">&nbsp;</td>\n          <td class=\"rightLine topLine\">&nbsp;</td>\n          `).join('')}\n        <td class=\"leftLine\">&nbsp;</td>\n      `;\n      let nodeLayer;\n\n      if (isVerticalLayer) {\n        nodeLayer = document.createElement('<ul>');\n        if (level + 2 === opts.verticalDepth) {\n          let tr = document.createElement('tr');\n\n          tr.setAttribute('class', 'verticalNodes');\n          tr.innerHTML = `<td></td>`;\n          tr.firstChild.appendChild(nodeLayer);\n        } else {\n          nodeWrapper.appendChild(nodeLayer);\n        }\n      } else {\n        nodeLayer = document.createElement('tr');\n        nodeLayer.setAttribute('class', 'nodes' + isHidden);\n        nodeWrapper.appendChild(lineLayer);\n        nodeWrapper.appendChild(nodeLayer);\n      }\n      // recurse through children nodes\n      childNodes.forEach((child) => {\n        let nodeCell;\n\n        if (isVerticalLayer) {\n          nodeCell = document.createElement('li');\n        } else {\n          nodeCell = document.createElement('td');\n          nodeCell.setAttribute('colspan', 2);\n        }\n        nodeLayer.appendChild(nodeCell);\n        that.buildHierarchy(nodeCell, child, level + 1, callback);\n      });\n    }\n  }\n  _clickChart(event) {\n    let closestNode = this._closest(event.target, function (el) {\n      return el.classList && el.classList.contains('node');\n    });\n\n    if (!closestNode && this.chart.querySelector('.node.focused')) {\n      this.chart.querySelector('.node.focused').classList.remove('focused');\n    }\n  }\n  _clickExportButton() {\n    let opts = this.options,\n      chartContainer = this.chartContainer,\n      mask = chartContainer.querySelector(':scope > .mask'),\n      sourceChart = chartContainer.querySelector('.orgchart:not(.hidden)'),\n      flag = opts.direction === 'l2r' || opts.direction === 'r2l';\n\n    if (!mask) {\n      mask = document.createElement('div');\n      mask.setAttribute('class', 'mask');\n      mask.innerHTML = `<i class=\"fa fa-circle-o-notch fa-spin spinner\"></i>`;\n      chartContainer.appendChild(mask);\n    } else {\n      mask.classList.remove('hidden');\n    }\n    chartContainer.classList.add('canvasContainer');\n    window.html2canvas(sourceChart, {\n      'width': flag ? sourceChart.clientHeight : sourceChart.clientWidth,\n      'height': flag ? sourceChart.clientWidth : sourceChart.clientHeight,\n      'onclone': function (cloneDoc) {\n        let canvasContainer = cloneDoc.querySelector('.canvasContainer');\n\n        canvasContainer.style.overflow = 'visible';\n        canvasContainer.querySelector('.orgchart:not(.hidden)').transform = '';\n      }\n    })\n    .then((canvas) => {\n      let downloadBtn = chartContainer.querySelector('.oc-download-btn');\n\n      chartContainer.querySelector('.mask').classList.add('hidden');\n      downloadBtn.setAttribute('href', canvas.toDataURL());\n      downloadBtn.click();\n    })\n    .catch((err) => {\n      console.error('Failed to export the curent orgchart!', err);\n    })\n    .finally(() => {\n      chartContainer.classList.remove('canvasContainer');\n    });\n  }\n  _loopChart(chart) {\n    let subObj = { 'id': chart.querySelector('.node').id };\n\n    if (chart.children[3]) {\n      Array.from(chart.children[3].children).forEach((el) => {\n        if (!subObj.children) { subObj.children = []; }\n        subObj.children.push(this._loopChart(el.firstChild));\n      });\n    }\n    return subObj;\n  }\n  getHierarchy() {\n    if (!this.chart.querySelector('.node').id) {\n      return 'Error: Nodes of orghcart to be exported must have id attribute!';\n    }\n    return this._loopChart(this.chart.querySelector('table'));\n  }\n  _onPanStart(event) {\n    let chart = event.currentTarget;\n\n    if (this._closest(event.target, (el) => el.classList && el.classList.contains('node')) ||\n      (event.touches && event.touches.length > 1)) {\n      chart.dataset.panning = false;\n      return;\n    }\n    chart.style.cursor = 'move';\n    chart.dataset.panning = true;\n\n    let lastX = 0,\n      lastY = 0,\n      lastTf = window.getComputedStyle(chart).transform;\n\n    if (lastTf !== 'none') {\n      let temp = lastTf.split(',');\n\n      if (!lastTf.includes('3d')) {\n        lastX = Number.parseInt(temp[4], 10);\n        lastY = Number.parseInt(temp[5], 10);\n      } else {\n        lastX = Number.parseInt(temp[12], 10);\n        lastY = Number.parseInt(temp[13], 10);\n      }\n    }\n    let startX = 0,\n      startY = 0;\n\n    if (!event.targetTouches) { // pan on desktop\n      startX = event.pageX - lastX;\n      startY = event.pageY - lastY;\n    } else if (event.targetTouches.length === 1) { // pan on mobile device\n      startX = event.targetTouches[0].pageX - lastX;\n      startY = event.targetTouches[0].pageY - lastY;\n    } else if (event.targetTouches.length > 1) {\n      return;\n    }\n    chart.dataset.panStart = JSON.stringify({ 'startX': startX, 'startY': startY });\n    chart.addEventListener('mousemove', this._onPanning.bind(this));\n    chart.addEventListener('touchmove', this._onPanning.bind(this));\n  }\n  _onPanning(event) {\n    let chart = event.currentTarget;\n\n    if (chart.dataset.panning === 'false') {\n      return;\n    }\n    let newX = 0,\n      newY = 0,\n      panStart = JSON.parse(chart.dataset.panStart),\n      startX = panStart.startX,\n      startY = panStart.startY;\n\n    if (!event.targetTouches) { // pand on desktop\n      newX = event.pageX - startX;\n      newY = event.pageY - startY;\n    } else if (event.targetTouches.length === 1) { // pan on mobile device\n      newX = event.targetTouches[0].pageX - startX;\n      newY = event.targetTouches[0].pageY - startY;\n    } else if (event.targetTouches.length > 1) {\n      return;\n    }\n    let lastTf = window.getComputedStyle(chart).transform;\n\n    if (lastTf === 'none') {\n      if (!lastTf.includes('3d')) {\n        chart.style.transform = 'matrix(1, 0, 0, 1, ' + newX + ', ' + newY + ')';\n      } else {\n        chart.style.transform = 'matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ' + newX + ', ' + newY + ', 0, 1)';\n      }\n    } else {\n      let matrix = lastTf.split(',');\n\n      if (!lastTf.includes('3d')) {\n        matrix[4] = newX;\n        matrix[5] = newY + ')';\n      } else {\n        matrix[12] = newX;\n        matrix[13] = newY;\n      }\n      chart.style.transform = matrix.join(',');\n    }\n  }\n  _onPanEnd(event) {\n    let chart = this.chart;\n\n    if (chart.dataset.panning === 'true') {\n      chart.dataset.panning = false;\n      chart.style.cursor = 'default';\n      document.body.removeEventListener('mousemove', this._onPanning);\n      document.body.removeEventListener('touchmove', this._onPanning);\n    }\n  }\n  _setChartScale(chart, newScale) {\n    let lastTf = window.getComputedStyle(chart).transform;\n\n    if (lastTf === 'none') {\n      chart.style.transform = 'scale(' + newScale + ',' + newScale + ')';\n    } else {\n      let matrix = lastTf.split(',');\n\n      if (!lastTf.includes('3d')) {\n        matrix[0] = 'matrix(' + newScale;\n        matrix[3] = newScale;\n        chart.style.transform = lastTf + ' scale(' + newScale + ',' + newScale + ')';\n      } else {\n        chart.style.transform = lastTf + ' scale3d(' + newScale + ',' + newScale + ', 1)';\n      }\n    }\n    chart.dataset.scale = newScale;\n  }\n  _onWheeling(event) {\n    event.preventDefault();\n\n    let newScale = event.deltaY > 0 ? 0.8 : 1.2;\n\n    this._setChartScale(this.chart, newScale);\n  }\n  _getPinchDist(event) {\n    return Math.sqrt((event.touches[0].clientX - event.touches[1].clientX) *\n      (event.touches[0].clientX - event.touches[1].clientX) +\n      (event.touches[0].clientY - event.touches[1].clientY) *\n      (event.touches[0].clientY - event.touches[1].clientY));\n  }\n  _onTouchStart(event) {\n    let chart = this.chart;\n\n    if (event.touches && event.touches.length === 2) {\n      let dist = this._getPinchDist(event);\n\n      chart.dataset.pinching = true;\n      chart.dataset.pinchDistStart = dist;\n    }\n  }\n  _onTouchMove(event) {\n    let chart = this.chart;\n\n    if (chart.dataset.pinching) {\n      let dist = this._getPinchDist(event);\n\n      chart.dataset.pinchDistEnd = dist;\n    }\n  }\n  _onTouchEnd(event) {\n    let chart = this.chart;\n\n    if (chart.dataset.pinching) {\n      chart.dataset.pinching = false;\n      let diff = chart.dataset.pinchDistEnd - chart.dataset.pinchDistStart;\n\n      if (diff > 0) {\n        this._setChartScale(chart, 1);\n      } else if (diff < 0) {\n        this._setChartScale(chart, -1);\n      }\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// orgchart.js"],"sourceRoot":""}